/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.usermanagement.controller;

import com.usermanagement.model.dto.request.PublishMessageDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-01-15T16:27:25.988137400+02:00[Africa/Cairo]", comments = "Generator version: 7.10.0")
@Validated
@Tag(name = "Messaging", description = "the Messaging API")
public interface PublishMessageApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /publishMessage : Publish a message
     *
     * @param publishMessageDto Message details to be published (required)
     * @return Message published successfully (status code 200)
     *         or Invalid input (status code 400)
     */
    @Operation(
        operationId = "publishMessage",
        summary = "Publish a message",
        tags = { "Messaging" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Message published successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/publishMessage",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<String> publishMessage(
        @Parameter(name = "PublishMessageDto", description = "Message details to be published", required = true) @Valid @RequestBody PublishMessageDto publishMessageDto
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\"Sent\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
